Grammar

    0 $accept: programme $end

    1 programme: DEBUT declarations EXECUTION bloc FIN

    2 declarations: declaration declarations
    3             | /* empty */

    4 declaration: type ':' IDF ';'
    5            | FIXE type ':' IDF '=' constante ';'
    6            | type ':' IDF '[' NUM ']' ';'

    7 type: TEXT
    8     | NUM
    9     | REAL

   10 constante: NUM
   11          | REAL
   12          | TEXT

   13 bloc: '{' instructions '}'

   14 instructions: instruction instructions
   15             | /* empty */

   16 instruction: IDF '<' expression ';'
   17            | AFFICHE '(' expression ')' ';'
   18            | LIRE '(' IDF ')' ';'
   19            | SI '(' condition ')' ALORS bloc SINON bloc
   20            | SI '(' condition ')' ALORS bloc
   21            | TANTQUE '(' condition ')' FAIRE bloc

   22 expression: expression PLUS expression
   23           | expression MOINS expression
   24           | expression MULT expression
   25           | expression DIV expression
   26           | '(' expression ')'
   27           | NUM
   28           | REAL
   29           | IDF

   30 condition: expression INF expression
   31          | expression INF_EGAL expression
   32          | expression SUP expression
   33          | expression SUP_EGAL expression
   34          | expression EGAL expression
   35          | expression DIFFERENT expression
   36          | NON condition
   37          | condition ET condition
   38          | condition OU condition


Terminals, with rules where they appear

$end (0) 0
'(' (40) 17 18 19 20 21 26
')' (41) 17 18 19 20 21 26
':' (58) 4 5 6
';' (59) 4 5 6 16 17 18
'<' (60) 16
'=' (61) 5
'[' (91) 6
']' (93) 6
'{' (123) 13
'}' (125) 13
error (256)
NUM (258) 6 8 10 27
REAL (259) 9 11 28
TEXT (260) 7 12
IDF (261) 4 5 6 16 18 29
SI (262) 19 20
ALORS (263) 19 20
SINON (264) 19
TANTQUE (265) 21
FAIRE (266) 21
DEBUT (267) 1
FIN (268) 1
EXECUTION (269) 1
FIXE (270) 5
AFFICHE (271) 17
LIRE (272) 18
ET (273) 37
OU (274) 38
NON (275) 36
EGAL (276) 34
DIFFERENT (277) 35
INF (278) 30
INF_EGAL (279) 31
SUP (280) 32
SUP_EGAL (281) 33
PLUS (282) 22
MOINS (283) 23
MULT (284) 24
DIV (285) 25


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
programme (42)
    on left: 1, on right: 0
declarations (43)
    on left: 2 3, on right: 1 2
declaration (44)
    on left: 4 5 6, on right: 2
type (45)
    on left: 7 8 9, on right: 4 5 6
constante (46)
    on left: 10 11 12, on right: 5
bloc (47)
    on left: 13, on right: 1 19 20 21
instructions (48)
    on left: 14 15, on right: 13 14
instruction (49)
    on left: 16 17 18 19 20 21, on right: 14
expression (50)
    on left: 22 23 24 25 26 27 28 29, on right: 16 17 22 23 24 25 26
    30 31 32 33 34 35
condition (51)
    on left: 30 31 32 33 34 35 36 37 38, on right: 19 20 21 36 37 38


state 0

    0 $accept: . programme $end

    DEBUT  shift, and go to state 1

    programme  go to state 2


state 1

    1 programme: DEBUT . declarations EXECUTION bloc FIN

    NUM   shift, and go to state 3
    REAL  shift, and go to state 4
    TEXT  shift, and go to state 5
    FIXE  shift, and go to state 6

    $default  reduce using rule 3 (declarations)

    declarations  go to state 7
    declaration   go to state 8
    type          go to state 9


state 2

    0 $accept: programme . $end

    $end  shift, and go to state 10


state 3

    8 type: NUM .

    $default  reduce using rule 8 (type)


state 4

    9 type: REAL .

    $default  reduce using rule 9 (type)


state 5

    7 type: TEXT .

    $default  reduce using rule 7 (type)


state 6

    5 declaration: FIXE . type ':' IDF '=' constante ';'

    NUM   shift, and go to state 3
    REAL  shift, and go to state 4
    TEXT  shift, and go to state 5

    type  go to state 11


state 7

    1 programme: DEBUT declarations . EXECUTION bloc FIN

    EXECUTION  shift, and go to state 12


state 8

    2 declarations: declaration . declarations

    NUM   shift, and go to state 3
    REAL  shift, and go to state 4
    TEXT  shift, and go to state 5
    FIXE  shift, and go to state 6

    $default  reduce using rule 3 (declarations)

    declarations  go to state 13
    declaration   go to state 8
    type          go to state 9


state 9

    4 declaration: type . ':' IDF ';'
    6            | type . ':' IDF '[' NUM ']' ';'

    ':'  shift, and go to state 14


state 10

    0 $accept: programme $end .

    $default  accept


state 11

    5 declaration: FIXE type . ':' IDF '=' constante ';'

    ':'  shift, and go to state 15


state 12

    1 programme: DEBUT declarations EXECUTION . bloc FIN

    '{'  shift, and go to state 16

    bloc  go to state 17


state 13

    2 declarations: declaration declarations .

    $default  reduce using rule 2 (declarations)


state 14

    4 declaration: type ':' . IDF ';'
    6            | type ':' . IDF '[' NUM ']' ';'

    IDF  shift, and go to state 18


state 15

    5 declaration: FIXE type ':' . IDF '=' constante ';'

    IDF  shift, and go to state 19


state 16

   13 bloc: '{' . instructions '}'

    IDF      shift, and go to state 20
    SI       shift, and go to state 21
    TANTQUE  shift, and go to state 22
    AFFICHE  shift, and go to state 23
    LIRE     shift, and go to state 24

    $default  reduce using rule 15 (instructions)

    instructions  go to state 25
    instruction   go to state 26


state 17

    1 programme: DEBUT declarations EXECUTION bloc . FIN

    FIN  shift, and go to state 27


state 18

    4 declaration: type ':' IDF . ';'
    6            | type ':' IDF . '[' NUM ']' ';'

    ';'  shift, and go to state 28
    '['  shift, and go to state 29


state 19

    5 declaration: FIXE type ':' IDF . '=' constante ';'

    '='  shift, and go to state 30


state 20

   16 instruction: IDF . '<' expression ';'

    '<'  shift, and go to state 31


state 21

   19 instruction: SI . '(' condition ')' ALORS bloc SINON bloc
   20            | SI . '(' condition ')' ALORS bloc

    '('  shift, and go to state 32


state 22

   21 instruction: TANTQUE . '(' condition ')' FAIRE bloc

    '('  shift, and go to state 33


state 23

   17 instruction: AFFICHE . '(' expression ')' ';'

    '('  shift, and go to state 34


state 24

   18 instruction: LIRE . '(' IDF ')' ';'

    '('  shift, and go to state 35


state 25

   13 bloc: '{' instructions . '}'

    '}'  shift, and go to state 36


state 26

   14 instructions: instruction . instructions

    IDF      shift, and go to state 20
    SI       shift, and go to state 21
    TANTQUE  shift, and go to state 22
    AFFICHE  shift, and go to state 23
    LIRE     shift, and go to state 24

    $default  reduce using rule 15 (instructions)

    instructions  go to state 37
    instruction   go to state 26


state 27

    1 programme: DEBUT declarations EXECUTION bloc FIN .

    $default  reduce using rule 1 (programme)


state 28

    4 declaration: type ':' IDF ';' .

    $default  reduce using rule 4 (declaration)


state 29

    6 declaration: type ':' IDF '[' . NUM ']' ';'

    NUM  shift, and go to state 38


state 30

    5 declaration: FIXE type ':' IDF '=' . constante ';'

    NUM   shift, and go to state 39
    REAL  shift, and go to state 40
    TEXT  shift, and go to state 41

    constante  go to state 42


state 31

   16 instruction: IDF '<' . expression ';'

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 47


state 32

   19 instruction: SI '(' . condition ')' ALORS bloc SINON bloc
   20            | SI '(' . condition ')' ALORS bloc

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    NON   shift, and go to state 48
    '('   shift, and go to state 46

    expression  go to state 49
    condition   go to state 50


state 33

   21 instruction: TANTQUE '(' . condition ')' FAIRE bloc

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    NON   shift, and go to state 48
    '('   shift, and go to state 46

    expression  go to state 49
    condition   go to state 51


state 34

   17 instruction: AFFICHE '(' . expression ')' ';'

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 52


state 35

   18 instruction: LIRE '(' . IDF ')' ';'

    IDF  shift, and go to state 53


state 36

   13 bloc: '{' instructions '}' .

    $default  reduce using rule 13 (bloc)


state 37

   14 instructions: instruction instructions .

    $default  reduce using rule 14 (instructions)


state 38

    6 declaration: type ':' IDF '[' NUM . ']' ';'

    ']'  shift, and go to state 54


state 39

   10 constante: NUM .

    $default  reduce using rule 10 (constante)


state 40

   11 constante: REAL .

    $default  reduce using rule 11 (constante)


state 41

   12 constante: TEXT .

    $default  reduce using rule 12 (constante)


state 42

    5 declaration: FIXE type ':' IDF '=' constante . ';'

    ';'  shift, and go to state 55


state 43

   27 expression: NUM .

    $default  reduce using rule 27 (expression)


state 44

   28 expression: REAL .

    $default  reduce using rule 28 (expression)


state 45

   29 expression: IDF .

    $default  reduce using rule 29 (expression)


state 46

   26 expression: '(' . expression ')'

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 56


state 47

   16 instruction: IDF '<' expression . ';'
   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression

    PLUS   shift, and go to state 57
    MOINS  shift, and go to state 58
    MULT   shift, and go to state 59
    DIV    shift, and go to state 60
    ';'    shift, and go to state 61


state 48

   36 condition: NON . condition

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    NON   shift, and go to state 48
    '('   shift, and go to state 46

    expression  go to state 49
    condition   go to state 62


state 49

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression
   30 condition: expression . INF expression
   31          | expression . INF_EGAL expression
   32          | expression . SUP expression
   33          | expression . SUP_EGAL expression
   34          | expression . EGAL expression
   35          | expression . DIFFERENT expression

    EGAL       shift, and go to state 63
    DIFFERENT  shift, and go to state 64
    INF        shift, and go to state 65
    INF_EGAL   shift, and go to state 66
    SUP        shift, and go to state 67
    SUP_EGAL   shift, and go to state 68
    PLUS       shift, and go to state 57
    MOINS      shift, and go to state 58
    MULT       shift, and go to state 59
    DIV        shift, and go to state 60


state 50

   19 instruction: SI '(' condition . ')' ALORS bloc SINON bloc
   20            | SI '(' condition . ')' ALORS bloc
   37 condition: condition . ET condition
   38          | condition . OU condition

    ET   shift, and go to state 69
    OU   shift, and go to state 70
    ')'  shift, and go to state 71


state 51

   21 instruction: TANTQUE '(' condition . ')' FAIRE bloc
   37 condition: condition . ET condition
   38          | condition . OU condition

    ET   shift, and go to state 69
    OU   shift, and go to state 70
    ')'  shift, and go to state 72


state 52

   17 instruction: AFFICHE '(' expression . ')' ';'
   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression

    PLUS   shift, and go to state 57
    MOINS  shift, and go to state 58
    MULT   shift, and go to state 59
    DIV    shift, and go to state 60
    ')'    shift, and go to state 73


state 53

   18 instruction: LIRE '(' IDF . ')' ';'

    ')'  shift, and go to state 74


state 54

    6 declaration: type ':' IDF '[' NUM ']' . ';'

    ';'  shift, and go to state 75


state 55

    5 declaration: FIXE type ':' IDF '=' constante ';' .

    $default  reduce using rule 5 (declaration)


state 56

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression
   26           | '(' expression . ')'

    PLUS   shift, and go to state 57
    MOINS  shift, and go to state 58
    MULT   shift, and go to state 59
    DIV    shift, and go to state 60
    ')'    shift, and go to state 76


state 57

   22 expression: expression PLUS . expression

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 77


state 58

   23 expression: expression MOINS . expression

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 78


state 59

   24 expression: expression MULT . expression

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 79


state 60

   25 expression: expression DIV . expression

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 80


state 61

   16 instruction: IDF '<' expression ';' .

    $default  reduce using rule 16 (instruction)


state 62

   36 condition: NON condition .
   37          | condition . ET condition
   38          | condition . OU condition

    $default  reduce using rule 36 (condition)


state 63

   34 condition: expression EGAL . expression

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 81


state 64

   35 condition: expression DIFFERENT . expression

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 82


state 65

   30 condition: expression INF . expression

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 83


state 66

   31 condition: expression INF_EGAL . expression

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 84


state 67

   32 condition: expression SUP . expression

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 85


state 68

   33 condition: expression SUP_EGAL . expression

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    '('   shift, and go to state 46

    expression  go to state 86


state 69

   37 condition: condition ET . condition

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    NON   shift, and go to state 48
    '('   shift, and go to state 46

    expression  go to state 49
    condition   go to state 87


state 70

   38 condition: condition OU . condition

    NUM   shift, and go to state 43
    REAL  shift, and go to state 44
    IDF   shift, and go to state 45
    NON   shift, and go to state 48
    '('   shift, and go to state 46

    expression  go to state 49
    condition   go to state 88


state 71

   19 instruction: SI '(' condition ')' . ALORS bloc SINON bloc
   20            | SI '(' condition ')' . ALORS bloc

    ALORS  shift, and go to state 89


state 72

   21 instruction: TANTQUE '(' condition ')' . FAIRE bloc

    FAIRE  shift, and go to state 90


state 73

   17 instruction: AFFICHE '(' expression ')' . ';'

    ';'  shift, and go to state 91


state 74

   18 instruction: LIRE '(' IDF ')' . ';'

    ';'  shift, and go to state 92


state 75

    6 declaration: type ':' IDF '[' NUM ']' ';' .

    $default  reduce using rule 6 (declaration)


state 76

   26 expression: '(' expression ')' .

    $default  reduce using rule 26 (expression)


state 77

   22 expression: expression . PLUS expression
   22           | expression PLUS expression .
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression

    MULT  shift, and go to state 59
    DIV   shift, and go to state 60

    $default  reduce using rule 22 (expression)


state 78

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   23           | expression MOINS expression .
   24           | expression . MULT expression
   25           | expression . DIV expression

    MULT  shift, and go to state 59
    DIV   shift, and go to state 60

    $default  reduce using rule 23 (expression)


state 79

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   24           | expression MULT expression .
   25           | expression . DIV expression

    $default  reduce using rule 24 (expression)


state 80

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression
   25           | expression DIV expression .

    $default  reduce using rule 25 (expression)


state 81

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression
   34 condition: expression EGAL expression .

    PLUS   shift, and go to state 57
    MOINS  shift, and go to state 58
    MULT   shift, and go to state 59
    DIV    shift, and go to state 60

    $default  reduce using rule 34 (condition)


state 82

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression
   35 condition: expression DIFFERENT expression .

    PLUS   shift, and go to state 57
    MOINS  shift, and go to state 58
    MULT   shift, and go to state 59
    DIV    shift, and go to state 60

    $default  reduce using rule 35 (condition)


state 83

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression
   30 condition: expression INF expression .

    PLUS   shift, and go to state 57
    MOINS  shift, and go to state 58
    MULT   shift, and go to state 59
    DIV    shift, and go to state 60

    $default  reduce using rule 30 (condition)


state 84

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression
   31 condition: expression INF_EGAL expression .

    PLUS   shift, and go to state 57
    MOINS  shift, and go to state 58
    MULT   shift, and go to state 59
    DIV    shift, and go to state 60

    $default  reduce using rule 31 (condition)


state 85

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression
   32 condition: expression SUP expression .

    PLUS   shift, and go to state 57
    MOINS  shift, and go to state 58
    MULT   shift, and go to state 59
    DIV    shift, and go to state 60

    $default  reduce using rule 32 (condition)


state 86

   22 expression: expression . PLUS expression
   23           | expression . MOINS expression
   24           | expression . MULT expression
   25           | expression . DIV expression
   33 condition: expression SUP_EGAL expression .

    PLUS   shift, and go to state 57
    MOINS  shift, and go to state 58
    MULT   shift, and go to state 59
    DIV    shift, and go to state 60

    $default  reduce using rule 33 (condition)


state 87

   37 condition: condition . ET condition
   37          | condition ET condition .
   38          | condition . OU condition

    $default  reduce using rule 37 (condition)


state 88

   37 condition: condition . ET condition
   38          | condition . OU condition
   38          | condition OU condition .

    ET  shift, and go to state 69

    $default  reduce using rule 38 (condition)


state 89

   19 instruction: SI '(' condition ')' ALORS . bloc SINON bloc
   20            | SI '(' condition ')' ALORS . bloc

    '{'  shift, and go to state 16

    bloc  go to state 93


state 90

   21 instruction: TANTQUE '(' condition ')' FAIRE . bloc

    '{'  shift, and go to state 16

    bloc  go to state 94


state 91

   17 instruction: AFFICHE '(' expression ')' ';' .

    $default  reduce using rule 17 (instruction)


state 92

   18 instruction: LIRE '(' IDF ')' ';' .

    $default  reduce using rule 18 (instruction)


state 93

   19 instruction: SI '(' condition ')' ALORS bloc . SINON bloc
   20            | SI '(' condition ')' ALORS bloc .

    SINON  shift, and go to state 95

    $default  reduce using rule 20 (instruction)


state 94

   21 instruction: TANTQUE '(' condition ')' FAIRE bloc .

    $default  reduce using rule 21 (instruction)


state 95

   19 instruction: SI '(' condition ')' ALORS bloc SINON . bloc

    '{'  shift, and go to state 16

    bloc  go to state 96


state 96

   19 instruction: SI '(' condition ')' ALORS bloc SINON bloc .

    $default  reduce using rule 19 (instruction)
